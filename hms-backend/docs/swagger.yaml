openapi: 3.0.0
info:
  title: Student Konnekt API
  version: 1.0.0
  description: API documentation for the Home Management System, covering user authentication, assignments, feedback, submissions, and video management.

servers:
  - url: http://localhost:8000
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:  
    Assignment:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        subject:
          type: string
        createdBy:
          type: string
        due_date:
          type: string
          format: date
    Feedback:
      type: object
      properties:
        submissionId:  # Updated to match the Feedback model
          type: string
        userId:   # Updated to match the Feedback model
          type: string
        feedbackText:  # Updated to match the Feedback model
          type: string
        mark:
          type: number
    User:
      type: object
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        role:
          type: integer
          enum: [0, 1, 2] # ADMIN, LECTURER, STUDENT

security:
  - BearerAuth: []

paths:
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: "John"
                last_name:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                password:
                  type: string
                  example: "P@ssw0rd123"
                role:
                  type: integer
                  enum: [0, 1, 2] # ADMIN, LECTURER, STUDENT
                  example: 2
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
                  userId:
                    type: string
                    example: "64f4da5e0a34f9b0a45bf34a"
        '400':
          description: Invalid input
        '409':
          description: Email already exists

  /users/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                password:
                  type: string
                  example: "P@ssw0rd123"
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
        '401':
          description: Authentication failed

  /users/{userId}:
    delete:
      summary: Delete a user
      security:
        - BearerAuth: [] # Require authentication
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: string
            example: "64f4da5e0a34f9b0a45bf34a"
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authentication failed"
        '404':
          description: User not found

  /assignments:
    post:
      summary: Create a new assignment
      security:
        - BearerAuth: [] # Require authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "HMS"
                description:
                  type: string
                  example: "Complete the frontend"
                subject:
                  type: string
                  example: "IT DEVS"
                createdBy:
                  type: string
                  example: "66f19567ed2c02e6b0801ef0"
                due_date:
                  type: string
                  format: date
                  example: "2024-10-16"
      responses:
        '201':
          description: Assignment created successfully
        '400':
          description: Invalid input

    get:
      summary: Get all assignments
      responses:
        '200':
          description: A list of assignments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'

  /assignments/{assignmentId}:
    get:
      summary: Get an assignment by ID
      security:
        - BearerAuth: [] # Require authentication
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: ID of the assignment to retrieve
          schema:
            type: string
            example: "66f4b6eae2928de285f8b969"
      responses:
        '200':
          description: Assignment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        '404':
          description: Assignment not found

  /feedback:
    post:
      summary: Create feedback for an assignment
      security:
        - BearerAuth: [] # Require authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                submissionId:  # Updated to match the Feedback model
                  type: string
                  example: "64f4df5b0a34f9b0a45bf34e"
                userId:  # Updated to match the Feedback model
                  type: string
                  example: "66f19567ed2c02e6b0801ef0"
                feedbackText:  # Updated to match the Feedback model
                  type: string
                  example: "Good job, but needs more detail on question 3."
                mark:
                  type: number
                  example: 85
      responses:
        '201':
          description: Feedback created successfully
        '400':
          description: Invalid input

  /feedback/users/{userId}:
    get:
      summary: Get all feedback for a specific user
      description: Retrieve all feedback on all submissions for a specific user by their user ID.
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user for whom to retrieve feedback.
          schema:
            type: string
      responses:
        '200':
          description: A list of feedback for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feedback'
        '404':
          description: No feedback found for the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No feedback found for this user's submissions.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /feedback/{id}:
    get:
      summary: Get a feedback by ID
      security:
        - BearerAuth: [] # Require authentication
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the feedback
          schema:
            type: string
      responses:
        '200':
          description: Feedback details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
        '404':
          description: Feedback not found

    put:
      summary: Update a feedback
      security:
        - BearerAuth: [] # Require authentication
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the feedback
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                feedbackText:  # Updated to match the Feedback model
                  type: string
                  example: "Updated feedback"
                mark:
                  type: number
                  example: 90
      responses:
        '200':
          description: Feedback updated successfully
        '404':
          description: Feedback not found

    delete:
      summary: Delete a feedback
      security:
        - BearerAuth: [] # Require authentication
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the feedback
          schema:
            type: string
      responses:
        '200':
          description: Feedback deleted successfully
        '404':
          description: Feedback not found

  /feedback/assignment/{id}/download:
    get:
      summary: Download marks and feedback for a specific assignment
      security:
        - BearerAuth: [] # Require authentication
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the assignment to download feedback for
          schema:
            type: string
      responses:
        '200':
          description: Marks and feedback downloaded successfully
        '404':